# prototyping/docker-compose.yml
version: '3.8' # Specify Docker Compose file format version

services:
  # Neo4j Database Service
  neo4j:
    image: neo4j:latest # Use the latest official Neo4j Docker image
    hostname: neo4j-db # Assign a hostname for easier internal networking
    container_name: neo4j-db # A fixed name for the container
    ports:
      - "7474:7474" # Neo4j Browser (HTTP)
      - "7687:7687" # Bolt protocol (for drivers to connect)
    environment:
      # Set Neo4j authentication details.
      # IMPORTANT: Replace 'your_neo4j_password' with your actual password from .env
      NEO4J_AUTH: neo4j/group7C@pstone
      # Increase heap size for better performance, adjust as needed
      NEO4J_dbms_memory_heap_max__size: "1G"
      NEO4J_dbms_memory_heap_initial__size: "512M"
    volumes:
      # Persist data to a named volume to prevent data loss on container removal
      - neo4j_data:/data
      # Optional: Mount your seed_data.cypher for easy seeding
      # You can then run `cypher-shell -f /var/lib/neo4j/import/seed_data.cypher` inside the container
      # or connect via browser and run the queries.
      - ./neo4j/seed_data.cypher:/var/lib/neo4j/import/seed_data.cypher
    restart: unless-stopped # Always restart unless explicitly stopped

  # MCP Server Service (Optional: Uncomment to run MCP in Docker)
  # If you run MCP in Docker, your backend's MCP_URL will change to http://mcp-server:5000
  mcp-server:
     build:
       context: ./mcp # Build context is the mcp directory
       dockerfile: Dockerfile # Use a Dockerfile in the mcp directory
     container_name: mcp-server
     ports:
       - "5000:5000" # Expose MCP port to host
     environment:
       # Pass Neo4j connection details to the MCP container
       # Use the service name 'neo4j' as the hostname for internal Docker networking
       NEO4J_URI: bolt://neo4j:7687
       NEO4J_USER: neo4j
       NEO4J_PASSWORD: group7C@pstone # Match your Neo4j password
       MCP_PORT: 5000 # Ensure MCP listens on this port inside the container
     depends_on:
       - neo4j # Ensure Neo4j starts before MCP
     restart: unless-stopped

# Define named volumes for data persistence
volumes:
  neo4j_data:
